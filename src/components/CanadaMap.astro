---
// D3 will be imported on the client side

// Define props
export interface Props {
  width?: number;
  height?: number;
}

// Set default props
const { width = 800, height = 600 } = Astro.props;

// This will be rendered on the client
---

<div class="map-container" style={`width: 100%; max-width: ${width}px; margin: 0 auto;`}>
  <div id="map" style={`width: 100%; height: ${height}px; position: relative;`}>
    <div id="tooltip" class="tooltip"></div>
  </div>
</div>

<!-- Client-side JavaScript for the interactive map -->
<script>
  // Define TypeScript interface for province properties
  interface ProvinceProperties {
    province: string;
    name: string;
    // Add any other known properties from your GeoJSON
    code?: string;
    // Add more specific properties as needed
  }

  // Define the GeoJSON feature type
  interface GeoJSONFeature {
    type: string;
    properties: ProvinceProperties;
    geometry: {
      type: string;
      coordinates: number[][][] | number[][][][];
    };
  }

  // Wait for the DOM to be fully loaded before initializing the map
  document.addEventListener('DOMContentLoaded', async () => {
    // Dynamically import D3 for client-side usage
    const d3 = await import('d3');
    let container: HTMLElement | null = null;
    try {
      // Select the map container
      container = document.getElementById('map');
      if (!container) return;

      // Set up the SVG
      const containerEl = container;
      const containerWidth = container.clientWidth;
      const containerHeight = container.clientHeight;
      
      // Create SVG element
      const svg = d3.select(containerEl)
        .append('svg')
        .attr('width', '100%')
        .attr('height', '100%')
        .attr('viewBox', `0 0 ${containerWidth} ${containerHeight}`)
        .attr('preserveAspectRatio', 'xMidYMid meet');

      // Add a group for the map features
      const g = svg.append('g');

      // Create a projection centered on Canada
      const projection = d3.geoMercator()
        .center([-95, 60])
        .scale(300)
        .translate([containerWidth / 2, containerHeight / 2]);

      // Create a path generator
      const path = d3.geoPath().projection(projection);

      // Tooltip setup
      const tooltip = d3.select('#tooltip');
      
      // Function to handle mouseover events
      function handleMouseOver(event, d) {
        d3.select(this)
          .transition()
          .duration(200)
          .attr('opacity', 0.7)
          .attr('stroke', '#333')
          .attr('stroke-width', 1.5);

        // Show tooltip with district info
        const [x, y] = d3.pointer(event, container);
        const name = d.properties?.name || 'Unknown District';
        
        tooltip
          .style('left', `${x + 10}px`)
          .style('top', `${y - 10}px`)
          .style('opacity', 1)
          .html(`
            <div class="font-bold">${name}</div>
            <div class="text-sm">${d.properties?.province || ''}</div>
          `);
      }

      // Function to handle mouseout events
      function handleMouseOut() {
        d3.select(this)
          .transition()
          .duration(200)
          .attr('opacity', 1)
          .attr('stroke', '#fff')
          .attr('stroke-width', 0.5);
        
        // Hide tooltip
        tooltip.style('opacity', 0);
      }

      // Function to handle click events
      function handleClick(event, d) {
        const name = d.properties?.name || 'Unknown District';
        console.log(`Clicked on: ${name}`, d.properties);
        
        // Toggle highlight on click
        const isHighlighted = d3.select(this).attr('data-highlighted') === 'true';
        
        // Reset all highlights
        d3.selectAll('path').attr('data-highlighted', 'false');
        
        if (!isHighlighted) {
          // Highlight the clicked district
          d3.select(this)
            .attr('data-highlighted', 'true')
            .attr('opacity', 1)
            .attr('stroke', '#ff6b6b')
            .attr('stroke-width', 2);
        } else {
          // If already highlighted, reset all
          d3.selectAll('path')
            .attr('opacity', 1)
            .attr('stroke', '#fff')
            .attr('stroke-width', 0.5);
        }
      }

      // Load the GeoJSON data for Canadian provinces
      const response = await fetch('https://raw.githubusercontent.com/codeforgermany/click_that_hood/main/public/data/canada.geojson');
      const geojson = await response.json();

      // Color scale for provinces/territories
      const color = d3.scaleOrdinal(d3.schemeCategory10);

      // Draw the map
      g.selectAll('path')
        .data(geojson.features)
        .enter()
        .append('path')
        .attr('d', path)
        .attr('fill', (d: GeoJSONFeature) => color(d.properties?.province || 'default'))
        .attr('stroke', '#fff')
        .attr('stroke-width', 0.5)
        .attr('opacity', 1)
        .attr('data-highlighted', 'false')
        .on('mouseover', handleMouseOver)
        .on('mouseout', handleMouseOut)
        .on('click', handleClick);

      // Add zoom behavior
      const zoom = d3.zoom()
        .scaleExtent([1, 8])
        .on('zoom', (event) => {
          g.attr('transform', event.transform);
          // Adjust stroke width based on zoom level
          const scale = event.transform.k;
          g.selectAll('path')
            .attr('stroke-width', 0.5 / Math.sqrt(scale));
        });

      svg.call(zoom);

      // Add reset zoom button
      const resetButton = document.createElement('button');
      resetButton.className = 'reset-zoom';
      resetButton.textContent = 'Reset Zoom';
      resetButton.onclick = () => {
        svg.transition()
          .duration(750)
          .call(zoom.transform, d3.zoomIdentity);
      };
      
      // Insert the reset button
      containerEl.parentNode?.insertBefore(resetButton, containerEl);

    } catch (error) {
      console.error('Error loading the map:', error);
      if (container) {
        container.innerHTML = `
          <div class="p-4 bg-red-50 text-red-800 rounded">
            <p class="font-bold">Error loading the map</p>
            <p class="text-sm">${error.message || 'Please check your internet connection and try again.'}</p>
          </div>
        `;
      }
    }
  });
</script>

<style>
  .map-container {
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    position: relative;
    background: #f8fafc;
  }
  
  path {
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .tooltip {
    position: absolute;
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    padding: 8px 12px;
    pointer-events: none;
    font-size: 14px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    opacity: 0;
    transition: opacity 0.2s;
    z-index: 10;
    max-width: 200px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  
  .reset-zoom {
    position: absolute;
    top: 10px;
    right: 10px;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    padding: 6px 12px;
    font-size: 13px;
    cursor: pointer;
    z-index: 100;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    transition: all 0.2s ease;
  }
  
  .reset-zoom:hover {
    background: #f8f9fa;
    transform: translateY(-1px);
  }
  
  .reset-zoom:active {
    transform: translateY(0);
  }
</style>
